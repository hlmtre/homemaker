# simple managed object
# [[obj]]
# task = 'zt' <-- like 'name' but for, uh, tasks
# solution = 'cd ~/dotfiles/zt && git pull' <-- shell to execute
# dependencies = ['maim', 'slop'] <-- dependencies - do them first. Valid values: any other tasks, need not be specified before this one.

# complex managed object
# [[obj]]  <-- required `obj` header for each managed object
# file = '.Xresources' <-- name
# source = '~/dotfiles/.Xresources' <-- for symlink/copy, source file location
# destination = '~/.Xresources' <-- for symlink/copy, destination
# method = 'symlink' <-- symlink or copy?. Valid values: symlink, copy.
# post = "xrdb ~/.Xresources" <-- a wee shell script to execute upon SUCCESSFUL symlink/copy
# force = 'true' <-- overwrite if file already exists. Valid values: true, false; unspecified defaults to false


[[obj]]
file = 'alacritty'
source = '~/dotfiles/.config/alacritty'
destination = '~/.config/alacritty'
method = 'symlink'

[[obj]]
file = 'kitty'
source = '~/dotfiles/.config/kitty'
destination = '~/.config/kitty'
method = 'symlink'

[[obj]]
file = '.neomuttrc'
source = '~/dotfiles/.neomuttrc'
destination = '~/.neomuttrc'
method = 'symlink'
force = 'true'

[[obj]]
file = '.Xresources'
source = '~/dotfiles/.Xresources'
destination = '~/.Xresources'
method = 'symlink'
post = "xrdb ~/.Xresources"
force = 'true'

[[obj]]
file = 'sway'
source = '~/dotfiles/.config/sway'
destination = '~/.config/sway'
method = 'symlink'

[[obj]]
file = 'rofi'
source = '~/dotfiles/.config/rofi'
destination = '~/.config/rofi'
method = 'symlink'

[[obj]]
file = 'tmux.conf'
source = '~/dotfiles/.tmux.conf'
destination = '~/.tmux.conf'
method = 'symlink'
post = 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'

[[obj]]
file = 'gtk2'
source = '~/dotfiles/.config/gtk-2.0'
destination = '~/.config/gtk-2.0'
method = 'symlink'
force = 'true'

[[obj]]
file = 'gtk3'
source = '~/dotfiles/.config/gtk-3.0'
destination = '~/.config/gtk-3.0'
method = 'symlink'
force = 'true'

[[obj]]
file = 'nvim_config'
source = '~/dotfiles/.config/nvim'
destination = '~/.config/nvim'
method = 'symlink'
force = 'true'

[[obj]]
task = 'nvim'
method = 'execute'
solution = "test -x /usr/local/bin/nvim || (git clone https://github.com/neovim/nevim.git ~/src/ && cd ~/src/neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=/usr/local/ && sudo make install)"
dependencies = ['vim-plug']

[[obj]]
task = 'vim-plug'
method = 'execute'
solution = "sh -c 'curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'"

[[obj]]
file = 'fish'
source = '~/dotfiles/.config/fish'
destination = '~/.config/fish'
method = 'symlink'
force = 'true'

[[obj]]
task = 'zt-fedora-wayland'
solution = 'cd ~/dotfiles/zt && git pull'
dependencies = ['grim', 'slurp']
os = 'linux::fedora'

[[obj]]
task = 'grim'
solution = 'test -d ~/src/grim/ || (git clone https://github.com/emersion/grim.git ~/src && cd ~/src/grim && meson build && sudo ninja -C build install)'
method = 'execute'
os = 'linux::fedora'

[[obj]]
task = 'slurp'
method = 'execute'
solution = 'test -d ~/src/slurp/ || (git clone https://github.com/emersion/slurp.git ~/src && cd ~/src/slurp && meson build && sudo ninja -C build install)'
os = 'linux::fedora'

[[obj]]
task = 'zt'
solution = 'cd ~/dotfiles/zt && git pull'
dependencies = ['maim', 'slop']
os = 'linux::debian'

[[obj]]
task = 'slop'
source = '~/dotfiles/zt/slop'
solution = 'cd ~/dotfiles/zt/slop; make clean; cmake -DCMAKE_INSTALL_PREFIX="/usr" ./ && make && sudo make install'
method = 'execute'
os = 'linux::debian'

[[obj]]
task = 'maim'
source = '~/dotfiles/zt/maim'
solution = 'cd ~/dotfiles/zt/maim; make clean; cmake -DCMAKE_INSTALL_PREFIX="/usr" ./ && make && sudo make install'
method = 'execute'
dependencies = ['maim_dependencies', 'slop']
os = 'linux::debian'

[[obj]]
task = 'maim_dependencies'
solution = 'sudo apt install -y libxfixes-dev libglm-dev libxrandr-dev libglew-dev libegl1-mesa-dev libxcomposite-dev'
# os should be of the format either `windows` or `linux::<distro>`
os = "linux::debian"

[[obj]]
task = 'windows only'
solution = 'rustup update'
os = 'windows'

[[obj]]
task = 'rustup update'
solution = 'rustup update'
method = 'execute'

[[obj]]
task = 'loop_detection'
solution = 'echo HI'
#dependencies = 'maim_dependencies'

[[obj]]
task = 'playerctl dependencies'
solution = 'sudo pip3 install meson'
os = "linux::fedora"

[[obj]]
task = 'playerctl install'
solution = 'test -e ~/src/playerctl || mkdir -p ~/src; cd ~/src/; git clone https://github.com/altdesktop/playerctl.git ; cd playerctl; meson -Dgtk-doc=false -Dintrospection=false mesonbuild && sudo ninja -C mesonbuild install'
dependencies = ['playerctl dependencies']

[[obj]]
task = 'clone wlroots'
solution = 'git clone https://github.com/swaywm/wlroots ~/src/sway/subprojects/wlroots'
dependencies = ['clone swaywm']
os = "linux::fedora"

[[obj]]
task = 'clone swaywm'
solution = 'git clone https://github.com/swaywm/swaywm ~/src/sway; mkdir ~/src/sway/subprojects'
os = "linux::fedora"

[[obj]]
task = 'swaywm'
solution = 'meson build && sudo ninja -C build/ install'
dependencies = ['swaywm_dependencies_fedora', 'clone swaywm']
os = "linux::fedora"

[[obj]]
task = 'swaywm_dependencies_fedora'
solution = 'sudo dnf install -y libxkbcommon-devel cmake mesa-libgbm-devel libdrm-devel wayland-devel systemd-devel pixman-devel wayland-protocols-devel libxcb-devel xcb-util-devel ffmpeg-devel libxkbcommon-devel mesa-libgbm-devel libdrm-devel wayland-devel ffmpeg-devel'
os = "linux::fedora"

[[obj]]
task = 'redshift deps'
solution = 'sudo dnf install -y gettext-devel libtool autoconf automake'
os = "linux::fedora"
